"use strict";const cacheName="bakadora-cache-v1",startPage="./",offlinePage="./",filesToCache=["./","./"],neverCacheUrls=[/\/api/];function checkNeverCacheList(e){return!this.match(e)}self.addEventListener("install",function(e){console.log("SuperPWA service worker installation"),e.waitUntil(caches.open(cacheName).then(function(e){console.log("SuperPWA service worker caching dependencies"),filesToCache.map(function(t){return e.add(t).catch(function(e){return console.log("SuperPWA: "+String(e)+" "+t)})})}))}),self.addEventListener("activate",function(e){return console.log("SuperPWA service worker activation"),e.waitUntil(caches.keys().then(function(e){return Promise.all(e.map(function(e){if(e!==cacheName)return console.log("SuperPWA old cache removed",e),caches.delete(e)}))})),self.clients.claim()}),self.addEventListener("fetch",function(e){neverCacheUrls.every(checkNeverCacheList,e.request.url)?e.request.url.match(/^(http|https):\/\//i)&&new URL(e.request.url).origin===location.origin&&("GET"===e.request.method?"navigate"===e.request.mode&&navigator.onLine?e.respondWith(fetch(e.request).then(function(t){return caches.open(cacheName).then(function(n){return n.put(e.request,t.clone()),t})})):e.respondWith(caches.match(e.request).then(function(t){return t||fetch(e.request).then(function(t){return caches.open(cacheName).then(function(n){return n.put(e.request,t.clone()),t})})}).catch(function(){return caches.match("./")})):e.respondWith(fetch(e.request).catch(function(){return caches.match("./")}))):console.log("SuperPWA: Current request is excluded from cache.")});
//# sourceMappingURL=sw.min.js.map