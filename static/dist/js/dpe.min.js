const eventListenerOptionsSupported=()=>{let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e},defaultOptions={passive:!1,capture:!0},supportedPassiveTypes=["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"],getDefaultPassiveOption=(e,t)=>void 0!==e?e:-1!==supportedPassiveTypes.indexOf(t)&&defaultOptions.passive,getWritableOptions=e=>{const t=Object.getOwnPropertyDescriptor(e,"passive");return t&&!0!==t.writable&&void 0===t.set?Object.assign({},e):e},overwriteAddEvent=e=>{EventTarget.prototype.addEventListener=function(t,s,o){const n="object"==typeof o&&null!==o,r=n?o.capture:o;(o=n?getWritableOptions(o):{}).passive=getDefaultPassiveOption(o.passive,t),o.capture=void 0===r?defaultOptions.capture:r,e.call(this,t,s,o)},EventTarget.prototype.addEventListener._original=e},supportsPassive=eventListenerOptionsSupported();if(supportsPassive){overwriteAddEvent(EventTarget.prototype.addEventListener)}
//# sourceMappingURL=dpe.min.js.map